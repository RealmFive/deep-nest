var search_data = {"index":{"searchIndex":["deepnest","deep_dup()","deep_equal?()","deep_merge()","deep_stringify_keys()","deep_stringify_values()","deep_transform_keys()","deep_transform_values()","changelog","gemfile","gemfile.lock","guardfile","readme","rakefile","setup","deep_nest.rbs"],"longSearchIndex":["deepnest","deepnest::deep_dup()","deepnest::deep_equal?()","deepnest::deep_merge()","deepnest::deep_stringify_keys()","deepnest::deep_stringify_values()","deepnest::deep_transform_keys()","deepnest::deep_transform_values()","","","","","","","",""],"info":[["DeepNest","","DeepNest.html","","<p>Primary namespace for the deep_nest gem.\n"],["deep_dup","DeepNest","DeepNest.html#method-c-deep_dup","(obj)","<p>Returns a deep copy of the passed object\n<p>@param obj [Object] The object to be deep copied.\n<p>@return [obj] …\n"],["deep_equal?","DeepNest","DeepNest.html#method-c-deep_equal-3F","(obj1, obj2)","<p>Returns true if the passed objects are the same object, false otherwise.\n<p>@param obj1 [Object] First object …\n"],["deep_merge","DeepNest","DeepNest.html#method-c-deep_merge","(hash1, hash2, &block)","<p>Returns a hash with the passed hashes recursively merged. An optional block can be passed to merge values. …\n"],["deep_stringify_keys","DeepNest","DeepNest.html#method-c-deep_stringify_keys","(hash)","<p>Returns a hash with its keys converted to strings.\n<p>@param hash [Hash] The hash to stringify its keys. …\n"],["deep_stringify_values","DeepNest","DeepNest.html#method-c-deep_stringify_values","(hash)","<p>Returns a hash with its values converted to strings.\n<p>@param hash [Hash] The hash to stringify its values. …\n"],["deep_transform_keys","DeepNest","DeepNest.html#method-c-deep_transform_keys","(hash, &block)","<p>Returns a hash with its keys modified by the passed block.\n<p>@param hash [Hash] The hash to transform its …\n"],["deep_transform_values","DeepNest","DeepNest.html#method-c-deep_transform_values","(hash, &block)","<p>Returns a hash with its values modified by the passed block.\n<p>@param hash [Hash] The hash to transform …\n"],["CHANGELOG","","CHANGELOG_md.html","","<p>DeepNest\n<p>0.1.0\n<p>Initial Release\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source “rubygems.org”\n<p># Specify your gem&#39;s dependencies in …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  deep_nest (0.1.0)</pre>\n<p>GEM\n"],["Guardfile","","Guardfile.html","","<p>guard :rspec, cmd: “bundle exec rspec” do\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">watch</span>(<span class=\"ruby-regexp\">%r{^spec/.+_spec\\.rb$}</span>)\n<span class=\"ruby-identifier\">watch</span>(<span class=\"ruby-regexp\">%r{^lib/(.+)\\.(rb|thor)$}</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["README","","README_md.html","","<p>DeepNest\n<p>Welcome to your new gem! In this directory, you&#39;ll find the files you need to be able to …\n"],["Rakefile","","Rakefile.html","","<p># frozen_string_literal: true\n<p>require “bundler/gem_tasks” task :default =&gt; :spec\n"],["setup","","bin/setup.html","","<p>#!/usr/bin/env bash set -euo pipefail IFS=$&#39;nt&#39; set -vx\n<p>bundle install\n<p># Do any other automated …\n"],["deep_nest.rbs","","sig/deep_nest_rbs.html","","<p>module DeepNest\n\n<pre>VERSION: String\n# See the writing guide of rbs: https://github.com/ruby/rbs#guides</pre>\n<p>end …\n"]]}}